local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()
local thumbsDownEmoji = utf8.char(0x1F44E)
local noEntryEmoji = utf8.char(0x1F6AB)
local farmerEmoji = utf8.char(0x1F468, 0x200D, 0x1F33D)
local repeatEmoji = utf8.char(0x1F501)
local signalStrengthEmoji = utf8.char(0x1F4F6)
local doorEmoji = utf8.char(0x1F6AA)
local repeatSingleEmoji = utf8.char(0x1F502)
local clockwiseVerticalArrowsEmoji = utf8.char(0x1F503)
local timerClockEmoji = utf8.char(0x23F2)
local axeEmoji = utf8.char(0x1FA93)
local crossedSwordsEmoji = utf8.char(0x2694)
local rocketEmoji = utf8.char(0x1F680)
local computerMouseEmoji = utf8.char(0x1F5B1)
local moneyBagEmoji = utf8.char(0x1F4B0)

local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = game:GetService("Players").LocalPlayer or game:GetService("Players").PlayerAdded:Wait()
local VCurrentVersion



local SuggestionsWebhookUnsplit = "https://discordapp.com/api/webhooks/1088377340263944262/3j4NSuPTxdvdEf3VPpgvDYWdrV_y6-4C_Jc5SA3tGQ3Gcra0QfgKl4NghQzdhWkQ1srV"


local SuggestionsWebhookParts = SuggestionsWebhookUnsplit:split("{")


local SuggestionsWebhook = (SuggestionsWebhookParts[1] or "") .. (SuggestionsWebhookParts[2] or "")

local HttpService = game:GetService("HttpService")

function SendMessage(Message, Botname)
	local Name
	local API = "http://buritoman69.glitch.me/webhook"

	if (not Message or Message == "" or not Botname) or not Webhook then
		Name = "GameBot"
		return error("nil or empty message!")
	else
		Name = Botname
	end

	local Body = {
		['Key'] = tostring("applesaregood"),
		['Message'] = tostring(Message),
		['Name'] = Name,
		['Webhook'] = Webhook  
	}

	Body = HttpService:JSONEncode(Body)
	local Data = game:HttpPost(API, Body, false, "application/json")

	return Data or nil;
end

local function Notify(Message, Duration)
	Rayfield:Notify({
		Title = thumbsDownEmoji .. " L-HUB " .. thumbsDownEmoji,
		Content = Message,
		Duration = Duration,
		Image = 4483362458,
		Actions = {},
	})
end

local Window = Rayfield:CreateWindow({
    Name = thumbsDownEmoji .. " L-HUB " .. thumbsDownEmoji .. " | " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
    LoadingTitle = thumbsDownEmoji .. " L-HUB " .. thumbsDownEmoji,
    LoadingSubtitle = ".L.#5123",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "L-HUB"
    },
    Discord = {
       Enabled = true,
       Invite = "srh43uxcVG", -- The Discord invite code, do not include discord.gg/
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = thumbsDownEmoji .. " L-HUB " .. thumbsDownEmoji,
       Subtitle = "Key System",
       Note = "Join the discord (discord.gg/srh43uxcVG)",
       FileName = "L-HUBKey",
       SaveKey = true,
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = "https://pastebinp.com/raw/X5NJWfqD"
    }
 })
 



 local workspace = workspace
 local huge = math.huge
 local Remotes = game:GetService("ReplicatedStorage").Remotes
 
 local HumanoidRootPart = Player.Character:WaitForChild("HumanoidRootPart")
 
 local ChildAdded = false
 
 local Modes = {"Kill Aura"}
 
 for i,v in pairs(workspace.Maps:GetChildren()) do
     for i,v in pairs(v.Enemies:GetChildren()) do
         if not table.find(Modes, v.Name) then
             table.insert(Modes, v.Name)
         end
     end
 end
 
 
 local Main = Window:CreateTab("Main", 13173891515)
 
 local Section = Main:CreateSection("Farming")
 
 Main:CreateDropdown({
     Name = axeEmoji .. " Farm",
     SectionParent = Section,
     Options = Modes,
     CurrentOption = "Kill Aura",
     Flag = "Mode",
     Callback = function()end,
 })
 
 Main:CreateToggle({
     Name = crossedSwordsEmoji .. " Auto Attack",
     SectionParent = Section,
     CurrentValue = false,
     Flag = "Attack",
     Callback = function()end,
 })
 
 task.spawn(function()
     while task.wait() do
         if Rayfield.Flags.Attack.CurrentValue then
             local Number = huge
             local Closest
             
             for i,v in pairs(workspace.Maps:GetChildren()) do
                 for i,v in pairs(v.Enemies:GetChildren()) do
                     local Mode = Rayfield.Flags.Mode.CurrentOption[1]
                     if Mode == "Kill Aura" or v.Name == Mode and v:FindFirstChild("Torso") and v.Torso.Transparency == 0 then
                         local Magnitude = (HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                         if Magnitude < Number then
                             Number = Magnitude
                             Closest = v
                         end
                     end
                 end
             end
             
             if Closest then
                Remotes.EnemyRemotes.AttackEnemy:FireServer(Closest)
                
                repeat
                    if Rayfield.Flags.Teleport.CurrentValue then
                        HumanoidRootPart.CFrame = Closest.PrimaryPart.CFrame + Closest.PrimaryPart.CFrame.LookVector * -5
                    end
                    task.wait() 
                until not Closest or not Closest.Parent or not Closest:FindFirstChild("Torso") --[[or Closest.Torso.Transparency ~= 0]] or not Rayfield.Flags.Attack.CurrentValue or ChildAdded
                
                if ChildAdded then
                    ChildAdded = false
                end
            end
         end
     end
 end)

 Main:CreateToggle({
    Name = rocketEmoji .. " Téléportation",
    SectionParent = Section,
    CurrentValue = false,
    Flag = "Teleport",
    Callback = function()end,
})

 
 Main:CreateToggle({
     Name = computerMouseEmoji .. " Auto Click",
     SectionParent = Section,
     CurrentValue = false,
     Flag = "Click",
     Callback = function()end,
 })
 
 task.spawn(function()
     while task.wait() do
         if Rayfield.Flags.Click.CurrentValue then
             Remotes.EnemyRemotes.AttackClick:InvokeServer()
         end
     end
 end)


 local character = game.Players.LocalPlayer.Character
 local humanoid = character:WaitForChild("Humanoid")
 local rootPart = character:WaitForChild("HumanoidRootPart")
 local dropsFolder = game:GetService("Workspace").Drops 

 Main:CreateToggle({
    Name = moneyBagEmoji .. " Auto Collect",
    SectionParent = Section,
    CurrentValue = false,
    Flag = "Collect",
    Callback = function()end,
})

local tweenService = game:GetService("TweenService")

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Collect.CurrentValue then
            local closestCoin = nil
            local closestDistance = math.huge
            for _, coin in pairs(dropsFolder:GetChildren()) do
                if coin.Name == "DropModel" and coin:FindFirstChild("Coin") then
                    local distance = (coin.Coin.Position - rootPart.Position).magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestCoin = coin.Coin
                    end
                end
            end

            if closestCoin then
                local targetCFrame = CFrame.new(rootPart.Position, closestCoin.Position) * CFrame.new(0, 0, -5)
                local tweenInfo = TweenInfo.new((rootPart.Position - targetCFrame.p).Magnitude / 16, Enum.EasingStyle.Linear)
                local tween = tweenService:Create(rootPart, tweenInfo, {CFrame = targetCFrame})
                tween:Play()
                tween.Completed:Wait()
            else
                wait(1)
            end
        end
    end
end)


Main:CreateToggle({
    Name = farmerEmoji .. " Auto Quest Farm",
    SectionParent = Section,
    CurrentValue = false,
    Flag = "FarmQuest",
    Callback = function()end,
})



task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.FarmQuest.CurrentValue then
            local function findTaskDescText()
                local text = ""
                while text == "" do
                    local objectiveList = game:GetService("Players").LocalPlayer.PlayerGui.HUD.QuestFrame.ObjectiveList
                    local taskDescs = {}
                    for _, textLabel in pairs(objectiveList:GetChildren()) do
                        if textLabel:IsA("TextLabel") then
                            for _, descendant in pairs(textLabel:GetDescendants()) do
                                if descendant.Name == "TaskDesc" and descendant:IsA("TextLabel") then
                                    table.insert(taskDescs, descendant)
                                end
                            end
                        end
                    end
            
                    for _, taskDesc in pairs(taskDescs) do
                        local current, max = taskDesc.Text:match("%[(%d+)/(%d+)%]")
                        current = tonumber(current)
                        max = tonumber(max)
                        if current and max and current < max then
                            text = taskDesc.Text
                            break
                        end
                    end
            
                    if text == "" then wait(1) end
                end
            
                return text
            end
            
            local text = findTaskDescText()
            print("Text found:", text)
            
            local current, max = text:match("%[(%d+)/(%d+)%]")
            current = tonumber(current)
            max = tonumber(max)
            
            if current and max and current < max then
                local mobName = text:gsub("%s*%[[^%]]+%]%s*", "")
                local mobNameLower = mobName:lower()
                local mobNameFormatted = mobName:gsub("(%a)([%w_']*)", function(first, rest) return first:upper()..rest:lower() end)
            
                local mapsFolder = game:GetService("Workspace").Maps
                local player = game.Players.LocalPlayer.Character
                local HumanoidRootPart = player.HumanoidRootPart
            
                for _, map in pairs(mapsFolder:GetChildren()) do
                    local enemiesFolder = map:FindFirstChild("Enemies")
                    if enemiesFolder then
                        for _, enemy in pairs(enemiesFolder:GetChildren()) do
                            if enemy.Name:lower() == mobNameLower then
                                local primaryPart = enemy.PrimaryPart or enemy:FindFirstChild("HumanoidRootPart") or enemy:FindFirstChild("Torso")
                                if primaryPart then
                                    HumanoidRootPart.CFrame = primaryPart.CFrame
            
                                    -- Attack the enemy using the provided code
                                    local args = {
                                        [1] = workspace.Maps[map.Name].Enemies[mobNameFormatted]
                                    }
            
                                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EnemyRemotes"):WaitForChild("AttackEnemy"):FireServer(unpack(args))
                                end
                                break
                            end
                        end
                    end
                end
            end
wait(1)
        end
    end
end)



local FuseTab = Window:CreateTab("Fuse", 13173917203)
 
local Section = FuseTab:CreateSection("Change the name of the pet if you have the same name for several pets and look F9 or copie paste")




local Input = FuseTab:CreateInput({
    Name = "Name Pet",
    Info = "Input info/Description.", -- Speaks for itself, Remove if none.
    PlaceholderText = "Name Pet here",
    NumbersOnly = false, -- If the user can only type numbers. Remove if none.
    CharacterLimit = 15, --max character limit. Remove if none.
    OnEnter = false, -- Will callback only if the user pressed ENTER while the box is focused.
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        print(Value)
        _G.ID = Value
    end,
 })

 FuseTab:CreateButton({
    Name = "Get ID pet",
    Info = "Button info/Description.", -- Speaks for itself, Remove if none.
    Interact = 'Press it',
    Callback = function()





        local InventoryNest = game:GetService("Players").LocalPlayer.PlayerGui.InventoryUI.MainFrame.Outline.InnerFrame.InventoryScroll.InventoryNest

        for _, frame in pairs(InventoryNest:GetChildren()) do
            if frame:IsA("Frame") then
                local HeroName = frame:FindFirstChild("HeroName", true)
                if HeroName and HeroName:IsA("TextLabel") and HeroName.Text == _G.ID then
                    local intValue = frame:FindFirstChildOfClass("IntValue")
                    if intValue then
                        setclipboard(tostring(intValue.Value))
                        print(intValue.Value)
                    end
                end
            end
        end



    end,
 })



FuseTab:CreateSection("Auto Fuse [15 Seconds]")

local Slider = FuseTab:CreateSlider({
    Name = "select your pet ID",
    Info = "Button info/Description.", -- Speaks for itself, Remove if none.
    Range = {0, 100},
    Increment = 1,
    Suffix = "L-HUB",
    CurrentValue = 10,
    Flag = "Slider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.Fuse = Value
        print(_G.Fuse)
    end,
 })

 FuseTab:CreateToggle({
    Name = "Auto Fuse",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "ToggleFuse",
    Callback = function()end,
})


 task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.ToggleFuse.CurrentValue then




            for i = 1, 500 do
                    -- Utilisation de la variable selectedOption dans le code
                    local args = {
                    [1] = _G.Fuse,
                    [2] = {
                        [1] = i
                    }
                }

                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("InventoryRemotes"):WaitForChild("FuseHeroes"):FireServer(unpack(args))

                wait(10)
            end
        end
    end
end)



local Raid = Window:CreateTab("Raid", 13173953350)
 
local Section = Raid:CreateSection("Raid Auto Farm broken")


Raid:CreateToggle({
    Name = "Auto Tp",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "TpRaid",
    Callback = function()end,
})






task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.TpRaid.CurrentValue then

            local textLabel = game:GetService("Workspace").Lobbies["Arena Plaza"]["Arena Plaza"].ArenaTeleporters["Nomek Arena"].TimerPart.ArenaOpenTimer.TextLabel
            local Teleporter = game:GetService("Workspace").Lobbies["Arena Plaza"]["Arena Plaza"].ArenaTeleporters["Nomek Arena"].Teleporter
            
            if string.find(textLabel.Text, "JOIN NOW!") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Teleporter.CFrame
                wait(5)
    
                local args = {
                    [1] = "Nomek Arena"
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("JoinArena"):InvokeServer(unpack(args))
                
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("GetArenaName"):InvokeServer()
                
                
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocationRemotes"):WaitForChild("RespawnRequest"):InvokeServer()
                wait(100)
            end
        end
    end
end)


Raid:CreateToggle({
    Name = "Auto Farm Raid",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Raid",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Raid.CurrentValue then
            local character = game.Players.LocalPlayer.Character
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local closestEnemy
            local closestDistance = math.huge
            local enemyName
            
            for _, zone in pairs(game:GetService("Workspace").Arenas["Nomek Arena"]["Nomek Arena"].Zones:GetChildren()) do
                if zone:FindFirstChild("Enemies") then
                    for _, enemy in pairs(zone.Enemies:GetChildren()) do
                        local distance = (rootPart.Position - enemy.PrimaryPart.Position).magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestEnemy = enemy
                            enemyName = enemy.Name
                        end
                    end
                end
            end
            
            if closestEnemy then
                rootPart.CFrame = closestEnemy.PrimaryPart.CFrame
                local args = { [1] = closestEnemy }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EnemyRemotes"):WaitForChild("AttackEnemy"):FireServer(unpack(args))
            else
                wait(3)
                local bossDummy = game:GetService("Workspace").Arenas["Nomek Arena"]["Nomek Arena"].BossDummy:FindFirstChild("BOSS_DUMMY")
                if not bossDummy then
                    wait(3)
                    -- recommencer à attaquer les ennemis du début
                else
                    rootPart.CFrame = bossDummy.PrimaryPart.CFrame
                    local args = { [1] = bossDummy }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EnemyRemotes"):WaitForChild("AttackEnemy"):FireServer(unpack(args))
                end
            end
        
    
            wait(math.huge)
        end
    end
end)

local Section = Raid:CreateSection("Auto Buy Raid Shop")

Raid:CreateToggle({
    Name = "Auto Buy Yen",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Yen",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Yen.CurrentValue then

            local args = {
                [1] = "Yen"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))
            
        end
    end
end)

Raid:CreateToggle({
    Name = "Auto Buy Damage",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Damage",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Damage.CurrentValue then

            local args = {
                [1] = "Damage"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))
            
        end
    end
end)

Raid:CreateToggle({
    Name = "Auto Buy Luck",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Luck",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Luck.CurrentValue then

            local args = {
                [1] = "Luck"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))            

        end
    end
end)

Raid:CreateToggle({
    Name = "Auto Buy Cursed Note",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Cursed",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Cursed.CurrentValue then

            local args = {
                [1] = "CursedNotes"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))
            
        end
    end
end)

Raid:CreateToggle({
    Name = "Auto Buy Super Luck",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "SuperLuck",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.SuperLuck.CurrentValue then

            local args = {
                [1] = "SuperLuck"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))
            
        end
    end
end)

Raid:CreateToggle({
    Name = "Auto Buy Shiny Potion",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Shiny",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Shiny.CurrentValue then

            local args = {
                [1] = "Shiny"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))            

        end
    end
end)


Raid:CreateToggle({
    Name = "Auto Buy Pity Potion Secret",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Secret",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Secret.CurrentValue then
            
            local args = {
                [1] = "SecretPity"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ArenaRemotes"):WaitForChild("PurchaseArenaItem"):InvokeServer(unpack(args))   

        end
    end
end)

local Eggs = Window:CreateTab("Open", 13173906640)
 
local Section = Eggs:CreateSection("You have to be in the world where you want to open")






Eggs:CreateToggle({
    Name = "Auto Open",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Open",
    Callback = function()end,
})


local Remotes = game.ReplicatedStorage.Remotes

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Open.CurrentValue then
            Remotes.InventoryRemotes.HeroRoll:InvokeServer()
        end
    end
end)


local Misc = Window:CreateTab("Misc", 13174056924)

local Section = Misc:CreateSection("It doesn't all work")


local Button = Misc:CreateButton({
    Name = "Unlock GamePass",
    Info = "Button info/Description.", -- Speaks for itself, Remove if none.
    Interact = 'Press it',
    Callback = function()
        local player = game.Players.LocalPlayer
                local gamepasses = player.Gamepasses
                if gamepasses then
                    if gamepasses:FindFirstChild("Lucky") then
                        gamepasses.Lucky.Value = true
                    end
                    if gamepasses:FindFirstChild("Ultra Lucky") then
                        gamepasses["Ultra Lucky"].Value = true
                    end
                    if gamepasses:FindFirstChild("Teleport") then
                        gamepasses.Teleport.Value = true
                    end
                    if gamepasses:FindFirstChild("+2 Crystal Open") then
                        gamepasses["+2 Crystal Open"].Value = true
                    end
                    if gamepasses:FindFirstChild("2x Fuse") then
                        gamepasses["2x Fuse"].Value = true
                    end
                    if gamepasses:FindFirstChild("Autoclicker") then
                        gamepasses.Autoclicker.Value = true
                    end
                    if gamepasses:FindFirstChild("VIP") then
                        gamepasses.VIP.Value = true
                    end
                    if gamepasses:FindFirstChild("+2 Animon Equipped") then
                        gamepasses["+2 Animon Equipped"].Value = true
                    end
                    if gamepasses:FindFirstChild("More Storage") then
                        gamepasses["More Storage"].Value = true
                    end
                    if gamepasses:FindFirstChild("2x Yen") then
                        gamepasses["2x Yen"].Value = true
                    end
                    if gamepasses:FindFirstChild("Super Lucky") then
                        gamepasses["Super Lucky"].Value = true
                    end
                    if gamepasses:FindFirstChild("Fast Open") then
                        gamepasses["Fast Open"].Value = true
                    end 
                    if gamepasses:FindFirstChild("Shiny Hunter") then 
                        gamepasses["Shiny Hunter"].Value = true 
                end           
            end        
    end,

})

Misc :CreateButton({
    Name = noEntryEmoji .. " Anti-AFK",
    Info = "Button info/Description.", -- Speaks for itself, Remove if none.
    Interact = 'Noob Hub',
    Callback = function()
 loadstring(game:HttpGet("https://raw.githubusercontent.com/AltsegoD/scripts/egoD/AntiAFKTimer.lua"))()
    end,
 })

Misc:CreateToggle({
    Name = "Auto Buy Areas",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Areas",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Areas.CurrentValue then

            for i,v in pairs(workspace.Maps:GetChildren()) do
                Remotes.LocationRemotes.LocationPurchase:InvokeServer(v.Name)
            end

        end
    end
end)



Misc:CreateToggle({
    Name = "Auto Claim Upgrades",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Claim",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Claim.CurrentValue then

            for i,v in pairs(Player.PlayerGui.UpgradesUI.MainFrame.BlueOutline.MainFrame.UpgradesScroll:GetChildren()) do
                if v.ClassName == "Frame" then
                    Remotes.UpgradesRemotes.ClaimUpgrade:InvokeServer(v.Name.." "..v.Frame.Button.UpgradeName.Text:split(" ")[2])
                end
            end

        end
    end
end)



Misc:CreateToggle({
    Name = "Auto Claim Quests",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Quests",
    Callback = function()end,
})

task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Quests.CurrentValue then

            for i,v in pairs(workspace.Maps:GetChildren()) do
                Remotes.QuestRemotes.RequestQuest:FireServer(v.Name)
                Remotes.QuestRemotes.ClaimQuestReward:InvokeServer(v.Name)
            end

        end
    end
end)


Misc:CreateToggle({
    Name = "Auto Equip Best",
    Info = "Toggle info/Description.",
    CurrentValue = false,
    Flag = "Best",
    Callback = function()end,
})



task.spawn(function()
    while task.wait() do
        if Rayfield.Flags.Best.CurrentValue then

            Remotes.HeroRemotes.EquipBest:FireServer()


        end
    end
end)










